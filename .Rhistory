lenght(unique(sample_w_replace))
length(unique(sample_w_replace))
print(sample_w_replace)
print(sample_wo_replace)
?sample
?rnorm
rm(list=ls())
num    <- 10000    ## number of variables to generate
mu     <- 5        ## mean to use to generate
stddev <- 2        ## standard deviation to use to generate
X <- rnorm(num, mean = mu, sd = stddev)    ## generate 10000 normal random variables with mean=5 and sd=2
sample_means <- function(n, reps)
{
Xbars <- rep(NA, reps)     ## vector to hold the mean of each sample
for (i in 1:reps)          ## iterate from 1 to the number of samples I am taking
{
Xbars[i] <- mean(sample(X, n, replace=FALSE))   ## calculate the mean for that sample, without replacement, and assign to my vector of sample means
}
return(Xbars)              ## return vector of sample means
}
n    <- 1000    ## number of values to be sampled from population
reps <- 8000    ## number of samples to take
s1000 <- sample_means(n, reps)     ## call function to generate list of 8000 sample means using sample size of 1000
## check how mean of sample means compares to mean of population
cat("Sample Mean: ", mean(s1000), " | Population Mean: ", mu,  "\n")
## standard deviation of sample means
## should be the same of the standard deviation of the population divided by the sample size
cat("Sample Standard Deviation : ", sd(s1000), " | Sample Mean: ", mean(s1000), "\n")
cat("Sample Standard Deviation : ", sd(s1000), " | Population SD / Sqrt(Sample Size): ", sd(X) / sqrt(n), "\n")
cat("Sample Standard Deviation : ", sd(s1000), "\n | Population SD / Sqrt(Sample Size): ", sd(X) / sqrt(n), "\n")
cat("Sample Standard Deviation : ", sd(s1000), "\nPopulation SD / Sqrt(Sample Size): ", sd(X) / sqrt(n), "\n")
cat("Sample Standard Deviation        : ", sd(s1000), "\nPopulation SD / Sqrt(Sample Size): ", sd(X) / sqrt(n), "\n")
(sd_s1000   <- sd(s1000))           ## this should be the same as ....
(sd_s1000   <- sd(s1000))           ## this should be the same as ....
(check_sd   <- sd(X) / sqrt(n))     ## this (sd of population divided by sample size)
cat("Sample Mean   : ", mean(s1000), "\nPopulation Mean: ", mu,  "\n")
cat("Sample Mean       : ", mean(s1000), "\nPopulation Mean: ", mu,  "\n")
cat("Sample Mean    : ", mean(s1000), "\nPopulation Mean: ", mu,  "\n")
n    <- 1000    ## number of values to be sampled from population
reps <- 8000    ## number of samples to take
s1000 <- sample_means(n, reps)     ## call function to generate list of 8000 sample means using sample size of 1000
## check how mean of sample means compares to mean of population
cat("Sample Mean    : ", mean(s1000), "\nPopulation Mean: ", mu,  "\n")
########## mean_s1000 <- mean(s1000)         ## mean of sample means should be same as population mean
## standard deviation of sample means
## should be the same of the standard deviation of the population divided by the square root of the sample size
cat("Sample Standard Deviation        : ", sd(s1000), "\nPopulation SD / Sqrt(Sample Size): ", sd(X) / sqrt(n), "\n")
n    <- 5000    ## number of values to be sampled from population
reps <- 8000    ## number of samples to take
s5000 <- sample_means(n, reps)     ## call function to generate list of 8000 sample means using sample size of 5000
## check how mean of sample means compares to mean of population
cat("Sample Mean    : ", mean(s5000), "\nPopulation Mean: ", mu,  "\n")
## standard deviation of sample means
## should be the same of the standard deviation of the population divided by the square root of the sample size
cat("Sample Standard Deviation        : ", sd(s5000), "\nPopulation SD / Sqrt(Sample Size): ", sd(X) / sqrt(n), "\n")
n    <- 5000    ## number of values to be sampled from population
reps <- 8000    ## number of samples to take
s5000 <- sample_means(n, reps)     ## call function to generate list of 8000 sample means using sample size of 5000
## check how mean of sample means compares to mean of population
cat("Sample Mean    : ", mean(s5000), "\nPopulation Mean: ", mu,  "\n")
## standard deviation of sample means
## should be the same of the standard deviation of the population divided by the square root of the sample size
cat("Sample Standard Deviation        : ", sd(s5000), "\nPopulation SD / Sqrt(Sample Size): ", sd(X) / sqrt(n), "\n")
n    <- 5       ## number of values to be sampled from population
reps <- 8000    ## number of samples to take
s20 <- sample_means(n, reps)     ## call function to generate list of 8000 sample means using sample size of 20
## check how mean of sample means compares to mean of population
cat("Sample Mean    : ", mean(s20), "\nPopulation Mean: ", mu,  "\n")
## standard deviation of sample means
## should be the same of the standard deviation of the population divided by the square root of the sample size
cat("Sample Standard Deviation        : ", sd(s20), "\nPopulation SD / Sqrt(Sample Size): ", sd(X) / sqrt(n), "\n")
opar <- par(mfrow = c(1,3), mar=c(4,4,2,1))  ## set graphic env params for num of rows and cols, and space around each plot
hist(s1000, main="Frequency of Mean of 8000 samples of size=1000") ## histogram for Mean of 8000 samples of size=1000
hist(s5000, main="Frequency of Mean of 8000 samples of size=5000") ## histogram for Mean of 8000 samples of size=5000
hist(s20, main="Frequency of Mean of 8000 samples of size=20")     ## histogram for Mean of 8000 samples of size=20
par(opar)   ## reset graphic env parameters back to their original values
?hist
opar <- par(mfrow = c(1,3), mar=c(4,4,2,1))  ## set graphic env params for num of rows and cols, and space around each plot
hist(s1000, xlab="sample mean", main="Frequency of Mean of 8000 samples of size=1000") ## histogram for Mean of 8000 samples of size=1000
hist(s5000, xlab="sample mean", main="Frequency of Mean of 8000 samples of size=5000") ## histogram for Mean of 8000 samples of size=5000
hist(s20, xlab="sample mean", main="Frequency of Mean of 8000 samples of size=20")     ## histogram for Mean of 8000 samples of size=20
par(opar)   ## reset graphic env parameters back to their original values
n<-10
x<-c(0:10)
prob_success = 0.5
dbinom(x,n,prob_success)
cbind(dbinom(x,n,prob_success))
binomTF <- cbind(dbinom(x,n,prob_success))
rownames(binomTF) <- x
binomTF
rbinom(2,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,10,0.5)
rbinom(10,1,0.5)
sum(rbinom(10,1,0.5))
sum(rbinom(10,1,0.5))
sum(rbinom(10,1,0.5))
sum(rbinom(10,1,0.5))
sum(rbinom(10,1,0.5))
sum(rbinom(10,1,0.5))
sum(rbinom(10,1,0.5))
sum(rbinom(10,1,0.5))
sum(rbinom(10,1,0.5))
pbinom(6:6,10,0.5)
pbinom(5:5,10,0.5)
dbinom(0:6,10,0.5)
dbinom(0:6,10,0.5)[5]
dbinom(0:10,10,0.5)
dbinom(0:10,10,0.5)[7]
sum_guess <- function(n)
{
prob_success = 0.5  ## probably of success for T/F questions
x<-c(0:n)           ## number of possible right answers for n questions
# calculate N random T/F guesses (where 1 = correct answer and 0 = incorrect answer)
guesses <- rbinom(n,1,prob_success)
print(guesses)
# calculate the number of correct
correct <- sum(guesses)
print(correct)
# calculate the probability of student guessing this many correct answers
pcorrect <- 100 * dbinom(x, n, prob_success)[correct+1]
print(pcorrect)
}
sum_guess(10)
sum_guess(10)
sum_guess(10)
sum_guess(10)
sum_guess(10)
sum_guess(10)
sum_guess(10)
sum_guess(10)
sum_guess(10)
sum_guess(10)
sum_guess(10)
sum_guess(10)
sum_guess(10)
sum_guess(10)
sum_guess <- function(n)
{
prob_success = 0.5  ## probably of success for T/F questions
x<-c(0:n)           ## number of possible right answers for n questions
# calculate N random T/F guesses (where 1 = correct answer and 0 = incorrect answer)
guesses <- rbinom(n,1,prob_success)
print(guesses)
# calculate the number of correct
correct <- sum(guesses)
print(correct)
# calculate the probability of student guessing this many correct answers
pcorrect <- 100 * dbinom(x, n, prob_success)[correct+1]
print(pcorrect)
return(c(guesses,correct,pcorrect))
}
c(guesses,correct,pcorrect) <- sum_guess(10)
sum_guess <- function(n)
{
prob_success = 0.5  ## probably of success for T/F questions
x<-c(0:n)           ## number of possible right answers for n questions
# calculate N random T/F guesses (where 1 = correct answer and 0 = incorrect answer)
guesses <- rbinom(n,1,prob_success)
#print(guesses)
# calculate the number of correct
correct <- sum(guesses)
#print(correct)
# calculate the probability of student guessing this many correct answers
pcorrect <- 100 * dbinom(x, n, prob_success)[correct+1]
#print(pcorrect)
return(c(guesses,correct,pcorrect))
}
c(guesses,correct,pcorrect) <- sum_guess(10)
answer  <- sum_guess(10)
print(answer)
answer  <- sum_guess(10)
sum_guess <- function(n)
{
prob_success = 0.5  ## probably of success for T/F questions
x<-c(0:n)           ## number of possible right answers for n questions
# calculate N random T/F guesses (where 1 = correct answer and 0 = incorrect answer)
guesses <- rbinom(n,1,prob_success)
# calculate the number of correct
correct <- sum(guesses)
# calculate the probability of student guessing this many correct answers
pcorrect <- 100 * dbinom(x, n, prob_success)[correct+1]
return(c(correct,pcorrect))
}
answer  <- sum_guess(10)
answer
monthly_files <- c( "201601-citibike-tripdata.csv",
"201602-citibike-tripdata.csv",
"201603-citibike-tripdata.csv",
"201604-citibike-tripdata.csv",
"201605-citibike-tripdata.csv",
"201606-citibike-tripdata.csv",
"201607-citibike-tripdata.csv",
"201608-citibike-tripdata.csv",
"201609-citibike-tripdata.csv",
"201610-citibike-tripdata.csv",
"201611-citibike-tripdata.csv",
"201512-citibike-tripdata.csv" )
winter   <- data.frame()
spring   <- data.frame()
summer   <- data.frame()
fall     <- data.frame()
fullyear <- data.frame()
# create vector of column headers
colheaders <- c("Trip.Duration", "Start.Time", "Stop.Time", "Day.Name", "Start.Station.ID", "Start.Station.Name",
"Distance", "Start.Station.Latitude", "Start.Station.Longitude", "End.Station.ID", "End.Station.Name",
"End.Station.Latitude", "End.Station.Longitude","Bike.ID","User.Type", "Birth.Year", "Gender")
## Functions for generating season and full year dataframes
gen_seasons <- function(season)
{
season_df <- data.frame()  # initialize blank dataframe to hold the current season data
print(season)
# for each season, load monthly data files and return single season dataframe
if (season == "winter")
{
for (m in c(1,2,12)) ## merge Dec, Jan, Feb monthly files into Winter season file
{
print(monthly_files[m])
month <- read.csv(monthly_files[m], header=FALSE, stringsAsFactors=FALSE)
season_df <- rbind(season_df, month)
}
}
if (season == "spring")
{
for (m in c(3,4,5)) ## merge Mar, Apr, May monthly files into Spring season file
{
print(monthly_files[m])
month <- read.csv(monthly_files[m], header=FALSE, stringsAsFactors=FALSE)
season_df <- rbind(season_df, month)
}
}
if (season == "summer")
{
for (m in c(6,7,8))     ## merge Jun, Jul, Aug monthly files into Summer season file
{
print(monthly_files[m])
month <- read.csv(monthly_files[m], header=FALSE, stringsAsFactors=FALSE)
season_df <- rbind(season_df, month)
}
}
if (season == "fall")
{
for (m in c(9,10,11))     ## merge Sep, Oct, Nov monthly files into Fall season file
{
print(monthly_files[m])
month <- read.csv(monthly_files[m], header=FALSE, stringsAsFactors=FALSE)
season_df <- rbind(season_df, month)
}
}
if (season == "fullyear")
{
for (m in 1:length(monthly_files))     # load all 12 2016 monthly data files into 1 full year dataframe
{
print(monthly_files[m])
month <- read.csv(monthly_files[m], header=FALSE, stringsAsFactors=FALSE)
season_df <- rbind(season_df, month)
}
}
names(season_df) <- colheaders
season_df <- remove_nas(season_df)
season_df <- calc_age(season_df)
season_df <- split_datetime(season_df)
return(season_df)
}
# Function to remove records with blank or NA values
remove_nas <- function(data)
{
# remove records where Birth.Year = blank
tmp <-  data[!is.na(as.numeric(data$Birth.Year)), ]
return(tmp)
}
# Function to convert Birth.Year to age and add to dataframe
calc_age <- function(data)
{
age <- 2017 - as.numeric(data$Birth.Year)
tmp <- cbind(data, age)
return(tmp)
}
# Function to split date and time into seperate components and add back to dataframe
split_datetime <- function(data)
{
# Split Start.Time
starttime_orig <- data$Start.Time
startdate <- unlist(strsplit(starttime_orig,split=" "))
startdate <- matrix(startdate, ncol=2,byrow=T)
colnames(startdate) <- c("Start.Date.Split", "Start.Time.Split")
startdate <- as.data.frame(startdate)
# bind the two dataframe
tmp <- cbind(data, startdate)
# Split Stop.Time
stoptime_orig <- data$Stop.Time
stopdate <- unlist(strsplit(stoptime_orig,split=" "))
stopdate <- matrix(stopdate, ncol=2,byrow=T)
colnames(stopdate) <- c("Stop.Date.Split", "Stop.Time.Split")
stopdate <- as.data.frame(stopdate)
# bind the two dataframe
tmp2 <- cbind(tmp, stopdate)
return(tmp2)
}
rm(list=ls())
monthly_files <- c( "201601-citibike-tripdata.csv",
"201602-citibike-tripdata.csv",
"201603-citibike-tripdata.csv",
"201604-citibike-tripdata.csv",
"201605-citibike-tripdata.csv",
"201606-citibike-tripdata.csv",
"201607-citibike-tripdata.csv",
"201608-citibike-tripdata.csv",
"201609-citibike-tripdata.csv",
"201610-citibike-tripdata.csv",
"201611-citibike-tripdata.csv",
"201512-citibike-tripdata.csv" )
winter   <- data.frame()
spring   <- data.frame()
summer   <- data.frame()
fall     <- data.frame()
fullyear <- data.frame()
# create vector of column headers
colheaders <- c("Trip.Duration", "Start.Time", "Stop.Time", "Day.Name", "Start.Station.ID", "Start.Station.Name",
"Distance", "Start.Station.Latitude", "Start.Station.Longitude", "End.Station.ID", "End.Station.Name",
"End.Station.Latitude", "End.Station.Longitude","Bike.ID","User.Type", "Birth.Year", "Gender")
## Functions for generating season and full year dataframes
gen_seasons <- function(season)
{
season_df <- data.frame()  # initialize blank dataframe to hold the current season data
print(season)
# for each season, load monthly data files and return single season dataframe
if (season == "winter")
{
for (m in c(1,2,12)) ## merge Dec, Jan, Feb monthly files into Winter season file
{
print(monthly_files[m])
month <- read.csv(monthly_files[m], header=FALSE, stringsAsFactors=FALSE)
season_df <- rbind(season_df, month)
}
}
if (season == "spring")
{
for (m in c(3,4,5)) ## merge Mar, Apr, May monthly files into Spring season file
{
print(monthly_files[m])
month <- read.csv(monthly_files[m], header=FALSE, stringsAsFactors=FALSE)
season_df <- rbind(season_df, month)
}
}
if (season == "summer")
{
for (m in c(6,7,8))     ## merge Jun, Jul, Aug monthly files into Summer season file
{
print(monthly_files[m])
month <- read.csv(monthly_files[m], header=FALSE, stringsAsFactors=FALSE)
season_df <- rbind(season_df, month)
}
}
if (season == "fall")
{
for (m in c(9,10,11))     ## merge Sep, Oct, Nov monthly files into Fall season file
{
print(monthly_files[m])
month <- read.csv(monthly_files[m], header=FALSE, stringsAsFactors=FALSE)
season_df <- rbind(season_df, month)
}
}
if (season == "fullyear")
{
for (m in 1:length(monthly_files))     # load all 12 2016 monthly data files into 1 full year dataframe
{
print(monthly_files[m])
month <- read.csv(monthly_files[m], header=FALSE, stringsAsFactors=FALSE)
season_df <- rbind(season_df, month)
}
}
names(season_df) <- colheaders
season_df <- remove_nas(season_df)
season_df <- calc_age(season_df)
season_df <- split_datetime(season_df)
return(season_df)
}
# Function to remove records with blank or NA values
remove_nas <- function(data)
{
# remove records where Birth.Year = blank
tmp <-  data[!is.na(as.numeric(data$Birth.Year)), ]
return(tmp)
}
# Function to convert Birth.Year to age and add to dataframe
calc_age <- function(data)
{
age <- 2017 - as.numeric(data$Birth.Year)
tmp <- cbind(data, age)
return(tmp)
}
# Function to split date and time into seperate components and add back to dataframe
split_datetime <- function(data)
{
# Split Start.Time
starttime_orig <- data$Start.Time
startdate <- unlist(strsplit(starttime_orig,split=" "))
startdate <- matrix(startdate, ncol=2,byrow=T)
colnames(startdate) <- c("Start.Date.Split", "Start.Time.Split")
startdate <- as.data.frame(startdate)
# bind the two dataframe
tmp <- cbind(data, startdate)
# Split Stop.Time
stoptime_orig <- data$Stop.Time
stopdate <- unlist(strsplit(stoptime_orig,split=" "))
stopdate <- matrix(stopdate, ncol=2,byrow=T)
colnames(stopdate) <- c("Stop.Date.Split", "Stop.Time.Split")
stopdate <- as.data.frame(stopdate)
# bind the two dataframe
tmp2 <- cbind(tmp, stopdate)
return(tmp2)
}
spring   <- gen_seasons("spring")
dbinom(0:1000, 1000, 0.5)
load("C:/Users/girou/Downloads/R at 4.12.RData")
load("C:/Users/girou/Downloads/R at 4.12.RData")
packageVersion("swirl")
install.packages("swirl")
packageVersion("swirl")
install_from_swirl("Getting and Cleaning Data")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
?download.file
?unzip
rm(list=ls())
library(swirl)
swirl()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 may 17")
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dtl
dt1
ymd_hms("2014-08-23 17:23:02")
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours=8, minutes=34, seconds=55)
this_moment
this_moment <- now()
this_moment <- update(this_moment, hours=hour(), minutes=minute(), seconds=second())
now()
this_moment <- update(this_moment, hours=7, minutes=38, seconds=15
)
this_moment
?now
nyc <- now(tzone = "America/NewYork")
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive
arrive <- with_tz(arrive, tzone="Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
?plot
12*60
1000/12
rm(list=ls())
setwd("C:/Users/girou/forked_repos/coursera/RepData_PeerAssessment1/")
data <- read.csv(unz("activity.zip", "activity.csv"))
days <- unique(data$date)
days
count(days)
nrow(unique(data$date))
dim(data)
nrow(data$interval)
intervals <- unique(data$interval)
intervals
121*5
288*5
1440/60
214*5
1070/60
